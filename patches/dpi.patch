diff -ruN xf86-input-cmt/.git/COMMIT_EDITMSG xf86-input-cmt.new/.git/COMMIT_EDITMSG
--- xf86-input-cmt/.git/COMMIT_EDITMSG	2015-07-26 19:34:39.435794000 -0600
+++ xf86-input-cmt.new/.git/COMMIT_EDITMSG	1969-12-31 17:00:00.000000000 -0700
@@ -1,9 +0,0 @@
-Set the dpi to 96 instead of 133. This increases the speed.
-# Please enter the commit message for your changes. Lines starting
-# with '#' will be ignored, and an empty message aborts the commit.
-# On branch master
-# Your branch is up-to-date with 'origin/master'.
-#
-# Changes to be committed:
-#	modified:   gesture.c
-#
diff -ruN xf86-input-cmt/.git/config xf86-input-cmt.new/.git/config
--- xf86-input-cmt/.git/config	2015-07-26 19:34:02.439627424 -0600
+++ xf86-input-cmt.new/.git/config	1969-12-31 17:00:00.000000000 -0700
@@ -1,11 +0,0 @@
-[core]
-	repositoryformatversion = 0
-	filemode = true
-	bare = false
-	logallrefupdates = true
-[remote "origin"]
-	url = https://github.com/hugegreenbug/xf86-input-cmt.git
-	fetch = +refs/heads/*:refs/remotes/origin/*
-[branch "master"]
-	remote = origin
-	merge = refs/heads/master
diff -ruN xf86-input-cmt/.git/description xf86-input-cmt.new/.git/description
--- xf86-input-cmt/.git/description	2015-07-26 19:33:59.700490810 -0600
+++ xf86-input-cmt.new/.git/description	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-Unnamed repository; edit this file 'description' to name the repository.
diff -ruN xf86-input-cmt/.git/HEAD xf86-input-cmt.new/.git/HEAD
--- xf86-input-cmt/.git/HEAD	2015-07-26 19:34:02.439627424 -0600
+++ xf86-input-cmt.new/.git/HEAD	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-ref: refs/heads/master
diff -ruN xf86-input-cmt/.git/hooks/applypatch-msg.sample xf86-input-cmt.new/.git/hooks/applypatch-msg.sample
--- xf86-input-cmt/.git/hooks/applypatch-msg.sample	2015-07-26 19:33:59.698490712 -0600
+++ xf86-input-cmt.new/.git/hooks/applypatch-msg.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,15 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message taken by
-# applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.  The hook is
-# allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "applypatch-msg".
-
-. git-sh-setup
-test -x "$GIT_DIR/hooks/commit-msg" &&
-	exec "$GIT_DIR/hooks/commit-msg" ${1+"$@"}
-:
diff -ruN xf86-input-cmt/.git/hooks/commit-msg.sample xf86-input-cmt.new/.git/hooks/commit-msg.sample
--- xf86-input-cmt/.git/hooks/commit-msg.sample	2015-07-26 19:33:59.699490761 -0600
+++ xf86-input-cmt.new/.git/hooks/commit-msg.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message.
-# Called by "git commit" with one argument, the name of the file
-# that has the commit message.  The hook should exit with non-zero
-# status after issuing an appropriate message if it wants to stop the
-# commit.  The hook is allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "commit-msg".
-
-# Uncomment the below to add a Signed-off-by line to the message.
-# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
-# hook is more suited to it.
-#
-# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
-
-# This example catches duplicate Signed-off-by lines.
-
-test "" = "$(grep '^Signed-off-by: ' "$1" |
-	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
-	echo >&2 Duplicate Signed-off-by lines.
-	exit 1
-}
diff -ruN xf86-input-cmt/.git/hooks/post-update.sample xf86-input-cmt.new/.git/hooks/post-update.sample
--- xf86-input-cmt/.git/hooks/post-update.sample	2015-07-26 19:33:59.698490712 -0600
+++ xf86-input-cmt.new/.git/hooks/post-update.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,8 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare a packed repository for use over
-# dumb transports.
-#
-# To enable this hook, rename this file to "post-update".
-
-exec git update-server-info
diff -ruN xf86-input-cmt/.git/hooks/pre-applypatch.sample xf86-input-cmt.new/.git/hooks/pre-applypatch.sample
--- xf86-input-cmt/.git/hooks/pre-applypatch.sample	2015-07-26 19:33:59.699490761 -0600
+++ xf86-input-cmt.new/.git/hooks/pre-applypatch.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,14 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed
-# by applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-applypatch".
-
-. git-sh-setup
-test -x "$GIT_DIR/hooks/pre-commit" &&
-	exec "$GIT_DIR/hooks/pre-commit" ${1+"$@"}
-:
diff -ruN xf86-input-cmt/.git/hooks/pre-commit.sample xf86-input-cmt.new/.git/hooks/pre-commit.sample
--- xf86-input-cmt/.git/hooks/pre-commit.sample	2015-07-26 19:33:59.699490761 -0600
+++ xf86-input-cmt.new/.git/hooks/pre-commit.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,49 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git commit" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message if
-# it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-commit".
-
-if git rev-parse --verify HEAD >/dev/null 2>&1
-then
-	against=HEAD
-else
-	# Initial commit: diff against an empty tree object
-	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
-fi
-
-# If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --bool hooks.allownonascii)
-
-# Redirect output to stderr.
-exec 1>&2
-
-# Cross platform projects tend to avoid non-ASCII filenames; prevent
-# them from being added to the repository. We exploit the fact that the
-# printable range starts at the space character and ends with tilde.
-if [ "$allownonascii" != "true" ] &&
-	# Note that the use of brackets around a tr range is ok here, (it's
-	# even required, for portability to Solaris 10's /usr/bin/tr), since
-	# the square bracket bytes happen to fall in the designated range.
-	test $(git diff --cached --name-only --diff-filter=A -z $against |
-	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
-then
-	cat <<\EOF
-Error: Attempt to add a non-ASCII file name.
-
-This can cause problems if you want to work with people on other platforms.
-
-To be portable it is advisable to rename the file.
-
-If you know what you are doing you can disable this check using:
-
-  git config hooks.allownonascii true
-EOF
-	exit 1
-fi
-
-# If there are whitespace errors, print the offending file names and fail.
-exec git diff-index --check --cached $against --
diff -ruN xf86-input-cmt/.git/hooks/prepare-commit-msg.sample xf86-input-cmt.new/.git/hooks/prepare-commit-msg.sample
--- xf86-input-cmt/.git/hooks/prepare-commit-msg.sample	2015-07-26 19:33:59.697490663 -0600
+++ xf86-input-cmt.new/.git/hooks/prepare-commit-msg.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,36 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare the commit log message.
-# Called by "git commit" with the name of the file that has the
-# commit message, followed by the description of the commit
-# message's source.  The hook's purpose is to edit the commit
-# message file.  If the hook fails with a non-zero status,
-# the commit is aborted.
-#
-# To enable this hook, rename this file to "prepare-commit-msg".
-
-# This hook includes three examples.  The first comments out the
-# "Conflicts:" part of a merge commit.
-#
-# The second includes the output of "git diff --name-status -r"
-# into the message, just before the "git status" output.  It is
-# commented because it doesn't cope with --amend or with squashed
-# commits.
-#
-# The third example adds a Signed-off-by line to the message, that can
-# still be edited.  This is rarely a good idea.
-
-case "$2,$3" in
-  merge,)
-    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
-
-# ,|template,)
-#   /usr/bin/perl -i.bak -pe '
-#      print "\n" . `git diff --cached --name-status -r`
-#	 if /^#/ && $first++ == 0' "$1" ;;
-
-  *) ;;
-esac
-
-# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
diff -ruN xf86-input-cmt/.git/hooks/pre-push.sample xf86-input-cmt.new/.git/hooks/pre-push.sample
--- xf86-input-cmt/.git/hooks/pre-push.sample	2015-07-26 19:33:59.697490663 -0600
+++ xf86-input-cmt.new/.git/hooks/pre-push.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,54 +0,0 @@
-#!/bin/sh
-
-# An example hook script to verify what is about to be pushed.  Called by "git
-# push" after it has checked the remote status, but before anything has been
-# pushed.  If this script exits with a non-zero status nothing will be pushed.
-#
-# This hook is called with the following parameters:
-#
-# $1 -- Name of the remote to which the push is being done
-# $2 -- URL to which the push is being done
-#
-# If pushing without using a named remote those arguments will be equal.
-#
-# Information about the commits which are being pushed is supplied as lines to
-# the standard input in the form:
-#
-#   <local ref> <local sha1> <remote ref> <remote sha1>
-#
-# This sample shows how to prevent push of commits where the log message starts
-# with "WIP" (work in progress).
-
-remote="$1"
-url="$2"
-
-z40=0000000000000000000000000000000000000000
-
-IFS=' '
-while read local_ref local_sha remote_ref remote_sha
-do
-	if [ "$local_sha" = $z40 ]
-	then
-		# Handle delete
-		:
-	else
-		if [ "$remote_sha" = $z40 ]
-		then
-			# New branch, examine all commits
-			range="$local_sha"
-		else
-			# Update to existing branch, examine new commits
-			range="$remote_sha..$local_sha"
-		fi
-
-		# Check for WIP commit
-		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
-		if [ -n "$commit" ]
-		then
-			echo "Found WIP commit in $local_ref, not pushing"
-			exit 1
-		fi
-	fi
-done
-
-exit 0
diff -ruN xf86-input-cmt/.git/hooks/pre-rebase.sample xf86-input-cmt.new/.git/hooks/pre-rebase.sample
--- xf86-input-cmt/.git/hooks/pre-rebase.sample	2015-07-26 19:33:59.698490712 -0600
+++ xf86-input-cmt.new/.git/hooks/pre-rebase.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,169 +0,0 @@
-#!/bin/sh
-#
-# Copyright (c) 2006, 2008 Junio C Hamano
-#
-# The "pre-rebase" hook is run just before "git rebase" starts doing
-# its job, and can prevent the command from running by exiting with
-# non-zero status.
-#
-# The hook is called with the following parameters:
-#
-# $1 -- the upstream the series was forked from.
-# $2 -- the branch being rebased (or empty when rebasing the current branch).
-#
-# This sample shows how to prevent topic branches that are already
-# merged to 'next' branch from getting rebased, because allowing it
-# would result in rebasing already published history.
-
-publish=next
-basebranch="$1"
-if test "$#" = 2
-then
-	topic="refs/heads/$2"
-else
-	topic=`git symbolic-ref HEAD` ||
-	exit 0 ;# we do not interrupt rebasing detached HEAD
-fi
-
-case "$topic" in
-refs/heads/??/*)
-	;;
-*)
-	exit 0 ;# we do not interrupt others.
-	;;
-esac
-
-# Now we are dealing with a topic branch being rebased
-# on top of master.  Is it OK to rebase it?
-
-# Does the topic really exist?
-git show-ref -q "$topic" || {
-	echo >&2 "No such branch $topic"
-	exit 1
-}
-
-# Is topic fully merged to master?
-not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
-if test -z "$not_in_master"
-then
-	echo >&2 "$topic is fully merged to master; better remove it."
-	exit 1 ;# we could allow it, but there is no point.
-fi
-
-# Is topic ever merged to next?  If so you should not be rebasing it.
-only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
-only_next_2=`git rev-list ^master           ${publish} | sort`
-if test "$only_next_1" = "$only_next_2"
-then
-	not_in_topic=`git rev-list "^$topic" master`
-	if test -z "$not_in_topic"
-	then
-		echo >&2 "$topic is already up-to-date with master"
-		exit 1 ;# we could allow it, but there is no point.
-	else
-		exit 0
-	fi
-else
-	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
-	/usr/bin/perl -e '
-		my $topic = $ARGV[0];
-		my $msg = "* $topic has commits already merged to public branch:\n";
-		my (%not_in_next) = map {
-			/^([0-9a-f]+) /;
-			($1 => 1);
-		} split(/\n/, $ARGV[1]);
-		for my $elem (map {
-				/^([0-9a-f]+) (.*)$/;
-				[$1 => $2];
-			} split(/\n/, $ARGV[2])) {
-			if (!exists $not_in_next{$elem->[0]}) {
-				if ($msg) {
-					print STDERR $msg;
-					undef $msg;
-				}
-				print STDERR " $elem->[1]\n";
-			}
-		}
-	' "$topic" "$not_in_next" "$not_in_master"
-	exit 1
-fi
-
-<<\DOC_END
-
-This sample hook safeguards topic branches that have been
-published from being rewound.
-
-The workflow assumed here is:
-
- * Once a topic branch forks from "master", "master" is never
-   merged into it again (either directly or indirectly).
-
- * Once a topic branch is fully cooked and merged into "master",
-   it is deleted.  If you need to build on top of it to correct
-   earlier mistakes, a new topic branch is created by forking at
-   the tip of the "master".  This is not strictly necessary, but
-   it makes it easier to keep your history simple.
-
- * Whenever you need to test or publish your changes to topic
-   branches, merge them into "next" branch.
-
-The script, being an example, hardcodes the publish branch name
-to be "next", but it is trivial to make it configurable via
-$GIT_DIR/config mechanism.
-
-With this workflow, you would want to know:
-
-(1) ... if a topic branch has ever been merged to "next".  Young
-    topic branches can have stupid mistakes you would rather
-    clean up before publishing, and things that have not been
-    merged into other branches can be easily rebased without
-    affecting other people.  But once it is published, you would
-    not want to rewind it.
-
-(2) ... if a topic branch has been fully merged to "master".
-    Then you can delete it.  More importantly, you should not
-    build on top of it -- other people may already want to
-    change things related to the topic as patches against your
-    "master", so if you need further changes, it is better to
-    fork the topic (perhaps with the same name) afresh from the
-    tip of "master".
-
-Let's look at this example:
-
-		   o---o---o---o---o---o---o---o---o---o "next"
-		  /       /           /           /
-		 /   a---a---b A     /           /
-		/   /               /           /
-	       /   /   c---c---c---c B         /
-	      /   /   /             \         /
-	     /   /   /   b---b C     \       /
-	    /   /   /   /             \     /
-    ---o---o---o---o---o---o---o---o---o---o---o "master"
-
-
-A, B and C are topic branches.
-
- * A has one fix since it was merged up to "next".
-
- * B has finished.  It has been fully merged up to "master" and "next",
-   and is ready to be deleted.
-
- * C has not merged to "next" at all.
-
-We would want to allow C to be rebased, refuse A, and encourage
-B to be deleted.
-
-To compute (1):
-
-	git rev-list ^master ^topic next
-	git rev-list ^master        next
-
-	if these match, topic has not merged in next at all.
-
-To compute (2):
-
-	git rev-list master..topic
-
-	if this is empty, it is fully merged to "master".
-
-DOC_END
diff -ruN xf86-input-cmt/.git/hooks/update.sample xf86-input-cmt.new/.git/hooks/update.sample
--- xf86-input-cmt/.git/hooks/update.sample	2015-07-26 19:33:59.698490712 -0600
+++ xf86-input-cmt.new/.git/hooks/update.sample	1969-12-31 17:00:00.000000000 -0700
@@ -1,128 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to blocks unannotated tags from entering.
-# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
-#
-# To enable this hook, rename this file to "update".
-#
-# Config
-# ------
-# hooks.allowunannotated
-#   This boolean sets whether unannotated tags will be allowed into the
-#   repository.  By default they won't be.
-# hooks.allowdeletetag
-#   This boolean sets whether deleting tags will be allowed in the
-#   repository.  By default they won't be.
-# hooks.allowmodifytag
-#   This boolean sets whether a tag may be modified after creation. By default
-#   it won't be.
-# hooks.allowdeletebranch
-#   This boolean sets whether deleting branches will be allowed in the
-#   repository.  By default they won't be.
-# hooks.denycreatebranch
-#   This boolean sets whether remotely creating branches will be denied
-#   in the repository.  By default this is allowed.
-#
-
-# --- Command line
-refname="$1"
-oldrev="$2"
-newrev="$3"
-
-# --- Safety check
-if [ -z "$GIT_DIR" ]; then
-	echo "Don't run this script from the command line." >&2
-	echo " (if you want, you could supply GIT_DIR then run" >&2
-	echo "  $0 <ref> <oldrev> <newrev>)" >&2
-	exit 1
-fi
-
-if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
-	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
-	exit 1
-fi
-
-# --- Config
-allowunannotated=$(git config --bool hooks.allowunannotated)
-allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
-denycreatebranch=$(git config --bool hooks.denycreatebranch)
-allowdeletetag=$(git config --bool hooks.allowdeletetag)
-allowmodifytag=$(git config --bool hooks.allowmodifytag)
-
-# check for no description
-projectdesc=$(sed -e '1q' "$GIT_DIR/description")
-case "$projectdesc" in
-"Unnamed repository"* | "")
-	echo "*** Project description file hasn't been set" >&2
-	exit 1
-	;;
-esac
-
-# --- Check types
-# if $newrev is 0000...0000, it's a commit to delete a ref.
-zero="0000000000000000000000000000000000000000"
-if [ "$newrev" = "$zero" ]; then
-	newrev_type=delete
-else
-	newrev_type=$(git cat-file -t $newrev)
-fi
-
-case "$refname","$newrev_type" in
-	refs/tags/*,commit)
-		# un-annotated tag
-		short_refname=${refname##refs/tags/}
-		if [ "$allowunannotated" != "true" ]; then
-			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
-			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,delete)
-		# delete tag
-		if [ "$allowdeletetag" != "true" ]; then
-			echo "*** Deleting a tag is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,tag)
-		# annotated tag
-		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
-		then
-			echo "*** Tag '$refname' already exists." >&2
-			echo "*** Modifying a tag is not allowed in this repository." >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,commit)
-		# branch
-		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
-			echo "*** Creating a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,delete)
-		# delete branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/remotes/*,commit)
-		# tracking branch
-		;;
-	refs/remotes/*,delete)
-		# delete tracking branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	*)
-		# Anything else (is there anything else?)
-		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
-		exit 1
-		;;
-esac
-
-# --- Finished
-exit 0
Binary files xf86-input-cmt/.git/index and xf86-input-cmt.new/.git/index differ
diff -ruN xf86-input-cmt/.git/info/exclude xf86-input-cmt.new/.git/info/exclude
--- xf86-input-cmt/.git/info/exclude	2015-07-26 19:33:59.699490761 -0600
+++ xf86-input-cmt.new/.git/info/exclude	1969-12-31 17:00:00.000000000 -0700
@@ -1,6 +0,0 @@
-# git ls-files --others --exclude-from=.git/info/exclude
-# Lines that start with '#' are comments.
-# For a project mostly in C, the following would be a good set of
-# exclude patterns (uncomment them if you want to use them):
-# *.[oa]
-# *~
diff -ruN xf86-input-cmt/.git/logs/HEAD xf86-input-cmt.new/.git/logs/HEAD
--- xf86-input-cmt/.git/logs/HEAD	2015-07-26 19:34:39.437794130 -0600
+++ xf86-input-cmt.new/.git/logs/HEAD	1969-12-31 17:00:00.000000000 -0700
@@ -1,2 +0,0 @@
-0000000000000000000000000000000000000000 3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 Hugh Greenberg <hugegreenbug@gmail.com> 1437960842 -0600	clone: from https://github.com/hugegreenbug/xf86-input-cmt.git
-3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 a89c7b7c5eeea399989917173586fcc63456d772 Hugh Greenberg <hugegreenbug@gmail.com> 1437960858 -0600	commit: Set the dpi to 96 instead of 133. This increases the speed.
diff -ruN xf86-input-cmt/.git/logs/refs/heads/master xf86-input-cmt.new/.git/logs/refs/heads/master
--- xf86-input-cmt/.git/logs/refs/heads/master	2015-07-26 19:34:39.437794130 -0600
+++ xf86-input-cmt.new/.git/logs/refs/heads/master	1969-12-31 17:00:00.000000000 -0700
@@ -1,2 +0,0 @@
-0000000000000000000000000000000000000000 3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 Hugh Greenberg <hugegreenbug@gmail.com> 1437960842 -0600	clone: from https://github.com/hugegreenbug/xf86-input-cmt.git
-3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 a89c7b7c5eeea399989917173586fcc63456d772 Hugh Greenberg <hugegreenbug@gmail.com> 1437960858 -0600	commit: Set the dpi to 96 instead of 133. This increases the speed.
diff -ruN xf86-input-cmt/.git/logs/refs/remotes/origin/HEAD xf86-input-cmt.new/.git/logs/refs/remotes/origin/HEAD
--- xf86-input-cmt/.git/logs/refs/remotes/origin/HEAD	2015-07-26 19:34:02.439627424 -0600
+++ xf86-input-cmt.new/.git/logs/refs/remotes/origin/HEAD	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 Hugh Greenberg <hugegreenbug@gmail.com> 1437960842 -0600	clone: from https://github.com/hugegreenbug/xf86-input-cmt.git
diff -ruN xf86-input-cmt/.git/logs/refs/remotes/origin/master xf86-input-cmt.new/.git/logs/refs/remotes/origin/master
--- xf86-input-cmt/.git/logs/refs/remotes/origin/master	2015-07-26 19:34:46.423255900 -0600
+++ xf86-input-cmt.new/.git/logs/refs/remotes/origin/master	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 a89c7b7c5eeea399989917173586fcc63456d772 Hugh Greenberg <hugegreenbug@gmail.com> 1437960886 -0600	update by push
Binary files xf86-input-cmt/.git/objects/2e/ec494ac2bc4c1fad8f39f45a93f271ae8b3b9b and xf86-input-cmt.new/.git/objects/2e/ec494ac2bc4c1fad8f39f45a93f271ae8b3b9b differ
Binary files xf86-input-cmt/.git/objects/32/842a3035d010ef21d4fe40904572c6aec855d9 and xf86-input-cmt.new/.git/objects/32/842a3035d010ef21d4fe40904572c6aec855d9 differ
Binary files xf86-input-cmt/.git/objects/3d/4ad8716af3a13443cb977bdf89b6c4d690431c and xf86-input-cmt.new/.git/objects/3d/4ad8716af3a13443cb977bdf89b6c4d690431c differ
Binary files xf86-input-cmt/.git/objects/a8/9c7b7c5eeea399989917173586fcc63456d772 and xf86-input-cmt.new/.git/objects/a8/9c7b7c5eeea399989917173586fcc63456d772 differ
Binary files xf86-input-cmt/.git/objects/pack/pack-75702506a72639c5a3905654030edd118f4fdbd5.idx and xf86-input-cmt.new/.git/objects/pack/pack-75702506a72639c5a3905654030edd118f4fdbd5.idx differ
Binary files xf86-input-cmt/.git/objects/pack/pack-75702506a72639c5a3905654030edd118f4fdbd5.pack and xf86-input-cmt.new/.git/objects/pack/pack-75702506a72639c5a3905654030edd118f4fdbd5.pack differ
diff -ruN xf86-input-cmt/.git/packed-refs xf86-input-cmt.new/.git/packed-refs
--- xf86-input-cmt/.git/packed-refs	2015-07-26 19:34:02.438627373 -0600
+++ xf86-input-cmt.new/.git/packed-refs	1969-12-31 17:00:00.000000000 -0700
@@ -1,9 +0,0 @@
-# pack-refs with: peeled fully-peeled 
-0679bae925938547cf711abdc285b191b06829d8 refs/remotes/origin/dev
-3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 refs/remotes/origin/master
-e69720edd16fdb84aab6b5153d4991b983725e97 refs/tags/v0.1.9
-09f7c9bee5402f273f6952bb87aa686f276e65b3 refs/tags/v0.5
-255af874732b5e9a0d4cd0b2af7a44ecef1c1c82 refs/tags/v0.5.1
-cbc91a1e377550d69c7257aeb4feb0a1eb60db7c refs/tags/v2.0
-4f00845f19ade0b49db306a87130eb2daf909d2e refs/tags/v2.0.1
-3b5c1949be9ba49a41d97601e92dd9133c0cbdc7 refs/tags/v2.0.2
diff -ruN xf86-input-cmt/.git/refs/heads/master xf86-input-cmt.new/.git/refs/heads/master
--- xf86-input-cmt/.git/refs/heads/master	2015-07-26 19:34:39.437794130 -0600
+++ xf86-input-cmt.new/.git/refs/heads/master	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-a89c7b7c5eeea399989917173586fcc63456d772
diff -ruN xf86-input-cmt/.git/refs/remotes/origin/HEAD xf86-input-cmt.new/.git/refs/remotes/origin/HEAD
--- xf86-input-cmt/.git/refs/remotes/origin/HEAD	2015-07-26 19:34:02.439627424 -0600
+++ xf86-input-cmt.new/.git/refs/remotes/origin/HEAD	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-ref: refs/remotes/origin/master
diff -ruN xf86-input-cmt/.git/refs/remotes/origin/master xf86-input-cmt.new/.git/refs/remotes/origin/master
--- xf86-input-cmt/.git/refs/remotes/origin/master	2015-07-26 19:34:46.423255900 -0600
+++ xf86-input-cmt.new/.git/refs/remotes/origin/master	1969-12-31 17:00:00.000000000 -0700
@@ -1 +0,0 @@
-a89c7b7c5eeea399989917173586fcc63456d772
diff -ruN xf86-input-cmt/src/gesture.c xf86-input-cmt.new/src/gesture.c
--- xf86-input-cmt/src/gesture.c	2015-07-26 19:36:21.869483673 -0600
+++ xf86-input-cmt.new/src/gesture.c	2015-07-26 19:36:55.146093175 -0600
@@ -140,8 +140,8 @@
     hwprops.bottom          = props->area_bottom;
     hwprops.res_x           = props->res_x;
     hwprops.res_y           = props->res_y;
-    hwprops.screen_x_dpi    = 133;
-    hwprops.screen_y_dpi    = 133;
+    hwprops.screen_x_dpi    = 96;
+    hwprops.screen_y_dpi    = 96;
     hwprops.orientation_minimum = props->orientation_minimum;
     hwprops.orientation_maximum = props->orientation_maximum;
     hwprops.max_finger_cnt  = evstate->slot_count;
